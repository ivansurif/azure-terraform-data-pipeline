name: 'Terraform'

on:
  # push:
  #   branches:
  #   - master
  [pull_request, workflow_dispatch]

jobs:
  
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - name: Set matrix
        id: set-matrix
        run: |
          echo 'Hello'
          echo "Github SHA is $GITHUB_SHA"
          echo "Base ref is $GITHUB_BASE_REF"
          git fetch origin $GITHUB_BASE_REF --depth=1
          DIFF=$( git diff --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA | xargs -L1 dirname | uniq)
          JSON="{\"include\":["
          # Only add paths with terraform in it
          # Initially only including github
          while read path; do
              if [[ "$path" == *"terraform"* ]]; then
                echo $path
              #if [[ "$path" == *"github"* ]]; then
              #    if [[ -d $path ]]; then
              #        HAS_TF=false
              #        for entry in "$path"/*.tf
              #        do
              #            if test -f "$entry"; then
              #                HAS_TF=true
              #            fi
              #        done
              #        if [ "$HAS_TF" = true ]; then
                          JSONline="{\"folder\": \"$path\"},"
                          JSON="$JSON$JSONline"
              #        fi
              #    fi
              fi
          done <<< "$DIFF"
          if [[ $JSON == *, ]]; then
              JSON="${JSON%?}"
          fi
          JSON="$JSON]}"
          echo $JSON
          echo "::set-output name=matrix::$( echo "$JSON" )"
  plan:
    name: Plan Terraform on "${{ matrix.folder }}"
    environment: plan
    needs: generate-matrix
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.folder }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
      GITHUB_OWNER: ${{ secrets.GH_OWNER }}
      
    steps:

    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      continue-on-error: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Create Diagram File in working directory
      run: terraform graph > diagram.dot

    - name: Upload file to Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Resource Graph
        path: /home/runner/work/terraform/terraform/terraform/azure/tier0/common_services/diagram.dot

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
    # The download will be a zip containing the .dot file.
    # The .dot file needs to be converted to svg using the Graphviz CLI for example
    # or an online conversion tool such as http://graphviz.it/

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color

      continue-on-error: true
    - name: Fail on Error
      if: ${{ steps.plan.outcome == 'failure' }}
      run: exit 1
    # Post Terraform plan as a comment to PR


  apply:
    environment: apply
    name: Apply Terraform on "${{ matrix.folder }}"
    needs: [generate-matrix, plan]
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.folder }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
      GITHUB_OWNER: ${{ secrets.GH_OWNER }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      id: init
      run: terraform init
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -no-color
      continue-on-error: true

    - name: Fail on Error
      if: ${{ steps.apply.outcome == 'failure' }}
      run: exit 1
